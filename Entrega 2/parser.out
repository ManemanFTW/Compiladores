Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DEF
    DIM
    GE
    GT
    LE
    LPAREN
    LT
    NE
    RETURN
    RPAREN
    SEMI
    STOP

Grammar

Rule 0     S' -> main
Rule 1     main -> list_statements
Rule 2     list_statements -> statement list_statements
Rule 3     list_statements -> if_statement list_statements
Rule 4     list_statements -> for_statement list_statements
Rule 5     list_statements -> end_statement
Rule 6     statement -> INTEGER command NEWLINE
Rule 7     statement -> INTEGER NEWLINE
Rule 8     statement -> NEWLINE
Rule 9     command -> REM
Rule 10    command -> LET ID EQUALS expr
Rule 11    command -> PRINT STRING
Rule 12    command -> COMMA PRINT
Rule 13    command -> LET error
Rule 14    command -> DATA numlist
Rule 15    numlist -> numlist COMMA val
Rule 16    numlist -> val
Rule 17    command -> READ varlist
Rule 18    varlist -> varlist COMMA ID
Rule 19    varlist -> ID
Rule 20    expr -> ID PLUS val
Rule 21    expr -> ID MINUS val
Rule 22    expr -> ID TIMES val
Rule 23    expr -> ID DIVIDE val
Rule 24    expr -> ID POWER val
Rule 25    expr -> ID COMMA expr
Rule 26    expr -> ID
Rule 27    expr -> val COMMA expr
Rule 28    expr -> val
Rule 29    val -> INTEGER
Rule 30    val -> FLOAT
Rule 31    end_statement -> INTEGER END
Rule 32    for_statement -> INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
Rule 33    for_statement -> INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
Rule 34    for_block -> statement for_block
Rule 35    for_block -> if_statement for_block
Rule 36    for_block -> for_statement for_block
Rule 37    for_block -> next_statement
Rule 38    next_statement -> INTEGER NEXT ID NEWLINE
Rule 39    if_statement -> INTEGER IF ID EQUALS val THEN INTEGER NEWLINE

Terminals, with rules where they appear

COMMA                : 12 15 18 25 27
DATA                 : 14
DEF                  : 
DIM                  : 
DIVIDE               : 23
END                  : 31
EQUALS               : 10 32 33 39
FLOAT                : 30
FOR                  : 32 33
GE                   : 
GT                   : 
ID                   : 10 18 19 20 21 22 23 24 25 26 32 33 38 39
IF                   : 39
INTEGER              : 6 7 29 31 32 33 38 39 39
LE                   : 
LET                  : 10 13
LPAREN               : 
LT                   : 
MINUS                : 21
NE                   : 
NEWLINE              : 6 7 8 32 33 38 39
NEXT                 : 38
PLUS                 : 20
POWER                : 24
PRINT                : 11 12
READ                 : 17
REM                  : 9
RETURN               : 
RPAREN               : 
SEMI                 : 
STEP                 : 32
STOP                 : 
STRING               : 11
THEN                 : 39
TIMES                : 22
TO                   : 32 33
error                : 13

Nonterminals, with rules where they appear

command              : 6
end_statement        : 5
expr                 : 10 25 27 32 32 33 33
for_block            : 32 33 34 35 36
for_statement        : 4 36
if_statement         : 3 35
list_statements      : 1 2 3 4
main                 : 0
next_statement       : 37
numlist              : 14 15
statement            : 2 34
val                  : 15 16 20 21 22 23 24 27 28 32 39
varlist              : 17 18

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . list_statements
    (2) list_statements -> . statement list_statements
    (3) list_statements -> . if_statement list_statements
    (4) list_statements -> . for_statement list_statements
    (5) list_statements -> . end_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (31) end_statement -> . INTEGER END

    INTEGER         shift and go to state 7
    NEWLINE         shift and go to state 8

    main                           shift and go to state 1
    list_statements                shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    end_statement                  shift and go to state 6

state 1

    (0) S' -> main .



state 2

    (1) main -> list_statements .

    $end            reduce using rule 1 (main -> list_statements .)


state 3

    (2) list_statements -> statement . list_statements
    (2) list_statements -> . statement list_statements
    (3) list_statements -> . if_statement list_statements
    (4) list_statements -> . for_statement list_statements
    (5) list_statements -> . end_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (31) end_statement -> . INTEGER END

    INTEGER         shift and go to state 7
    NEWLINE         shift and go to state 8

    statement                      shift and go to state 3
    list_statements                shift and go to state 9
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    end_statement                  shift and go to state 6

state 4

    (3) list_statements -> if_statement . list_statements
    (2) list_statements -> . statement list_statements
    (3) list_statements -> . if_statement list_statements
    (4) list_statements -> . for_statement list_statements
    (5) list_statements -> . end_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (31) end_statement -> . INTEGER END

    INTEGER         shift and go to state 7
    NEWLINE         shift and go to state 8

    if_statement                   shift and go to state 4
    list_statements                shift and go to state 10
    statement                      shift and go to state 3
    for_statement                  shift and go to state 5
    end_statement                  shift and go to state 6

state 5

    (4) list_statements -> for_statement . list_statements
    (2) list_statements -> . statement list_statements
    (3) list_statements -> . if_statement list_statements
    (4) list_statements -> . for_statement list_statements
    (5) list_statements -> . end_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (31) end_statement -> . INTEGER END

    INTEGER         shift and go to state 7
    NEWLINE         shift and go to state 8

    for_statement                  shift and go to state 5
    list_statements                shift and go to state 11
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    end_statement                  shift and go to state 6

state 6

    (5) list_statements -> end_statement .

    $end            reduce using rule 5 (list_statements -> end_statement .)


state 7

    (6) statement -> INTEGER . command NEWLINE
    (7) statement -> INTEGER . NEWLINE
    (39) if_statement -> INTEGER . IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> INTEGER . FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> INTEGER . FOR ID EQUALS expr TO expr NEWLINE for_block
    (31) end_statement -> INTEGER . END
    (9) command -> . REM
    (10) command -> . LET ID EQUALS expr
    (11) command -> . PRINT STRING
    (12) command -> . COMMA PRINT
    (13) command -> . LET error
    (14) command -> . DATA numlist
    (17) command -> . READ varlist

    NEWLINE         shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    END             shift and go to state 16
    REM             shift and go to state 17
    LET             shift and go to state 18
    PRINT           shift and go to state 19
    COMMA           shift and go to state 20
    DATA            shift and go to state 21
    READ            shift and go to state 22

    command                        shift and go to state 12

state 8

    (8) statement -> NEWLINE .

    INTEGER         reduce using rule 8 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> NEWLINE .)


state 9

    (2) list_statements -> statement list_statements .

    $end            reduce using rule 2 (list_statements -> statement list_statements .)


state 10

    (3) list_statements -> if_statement list_statements .

    $end            reduce using rule 3 (list_statements -> if_statement list_statements .)


state 11

    (4) list_statements -> for_statement list_statements .

    $end            reduce using rule 4 (list_statements -> for_statement list_statements .)


state 12

    (6) statement -> INTEGER command . NEWLINE

    NEWLINE         shift and go to state 23


state 13

    (7) statement -> INTEGER NEWLINE .

    INTEGER         reduce using rule 7 (statement -> INTEGER NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> INTEGER NEWLINE .)


state 14

    (39) if_statement -> INTEGER IF . ID EQUALS val THEN INTEGER NEWLINE

    ID              shift and go to state 24


state 15

    (32) for_statement -> INTEGER FOR . ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> INTEGER FOR . ID EQUALS expr TO expr NEWLINE for_block

    ID              shift and go to state 25


state 16

    (31) end_statement -> INTEGER END .

    $end            reduce using rule 31 (end_statement -> INTEGER END .)


state 17

    (9) command -> REM .

    NEWLINE         reduce using rule 9 (command -> REM .)


state 18

    (10) command -> LET . ID EQUALS expr
    (13) command -> LET . error

    ID              shift and go to state 26
    error           shift and go to state 27


state 19

    (11) command -> PRINT . STRING

    STRING          shift and go to state 28


state 20

    (12) command -> COMMA . PRINT

    PRINT           shift and go to state 29


state 21

    (14) command -> DATA . numlist
    (15) numlist -> . numlist COMMA val
    (16) numlist -> . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    numlist                        shift and go to state 30
    val                            shift and go to state 31

state 22

    (17) command -> READ . varlist
    (18) varlist -> . varlist COMMA ID
    (19) varlist -> . ID

    ID              shift and go to state 35

    varlist                        shift and go to state 34

state 23

    (6) statement -> INTEGER command NEWLINE .

    INTEGER         reduce using rule 6 (statement -> INTEGER command NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> INTEGER command NEWLINE .)


state 24

    (39) if_statement -> INTEGER IF ID . EQUALS val THEN INTEGER NEWLINE

    EQUALS          shift and go to state 36


state 25

    (32) for_statement -> INTEGER FOR ID . EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> INTEGER FOR ID . EQUALS expr TO expr NEWLINE for_block

    EQUALS          shift and go to state 37


state 26

    (10) command -> LET ID . EQUALS expr

    EQUALS          shift and go to state 38


state 27

    (13) command -> LET error .

    NEWLINE         reduce using rule 13 (command -> LET error .)


state 28

    (11) command -> PRINT STRING .

    NEWLINE         reduce using rule 11 (command -> PRINT STRING .)


state 29

    (12) command -> COMMA PRINT .

    NEWLINE         reduce using rule 12 (command -> COMMA PRINT .)


state 30

    (14) command -> DATA numlist .
    (15) numlist -> numlist . COMMA val

    NEWLINE         reduce using rule 14 (command -> DATA numlist .)
    COMMA           shift and go to state 39


state 31

    (16) numlist -> val .

    COMMA           reduce using rule 16 (numlist -> val .)
    NEWLINE         reduce using rule 16 (numlist -> val .)


state 32

    (29) val -> INTEGER .

    COMMA           reduce using rule 29 (val -> INTEGER .)
    NEWLINE         reduce using rule 29 (val -> INTEGER .)
    THEN            reduce using rule 29 (val -> INTEGER .)
    TO              reduce using rule 29 (val -> INTEGER .)
    STEP            reduce using rule 29 (val -> INTEGER .)


state 33

    (30) val -> FLOAT .

    COMMA           reduce using rule 30 (val -> FLOAT .)
    NEWLINE         reduce using rule 30 (val -> FLOAT .)
    THEN            reduce using rule 30 (val -> FLOAT .)
    TO              reduce using rule 30 (val -> FLOAT .)
    STEP            reduce using rule 30 (val -> FLOAT .)


state 34

    (17) command -> READ varlist .
    (18) varlist -> varlist . COMMA ID

    NEWLINE         reduce using rule 17 (command -> READ varlist .)
    COMMA           shift and go to state 40


state 35

    (19) varlist -> ID .

    COMMA           reduce using rule 19 (varlist -> ID .)
    NEWLINE         reduce using rule 19 (varlist -> ID .)


state 36

    (39) if_statement -> INTEGER IF ID EQUALS . val THEN INTEGER NEWLINE
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 41

state 37

    (32) for_statement -> INTEGER FOR ID EQUALS . expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> INTEGER FOR ID EQUALS . expr TO expr NEWLINE for_block
    (20) expr -> . ID PLUS val
    (21) expr -> . ID MINUS val
    (22) expr -> . ID TIMES val
    (23) expr -> . ID DIVIDE val
    (24) expr -> . ID POWER val
    (25) expr -> . ID COMMA expr
    (26) expr -> . ID
    (27) expr -> . val COMMA expr
    (28) expr -> . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    ID              shift and go to state 42
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    expr                           shift and go to state 43
    val                            shift and go to state 44

state 38

    (10) command -> LET ID EQUALS . expr
    (20) expr -> . ID PLUS val
    (21) expr -> . ID MINUS val
    (22) expr -> . ID TIMES val
    (23) expr -> . ID DIVIDE val
    (24) expr -> . ID POWER val
    (25) expr -> . ID COMMA expr
    (26) expr -> . ID
    (27) expr -> . val COMMA expr
    (28) expr -> . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    ID              shift and go to state 42
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    expr                           shift and go to state 45
    val                            shift and go to state 44

state 39

    (15) numlist -> numlist COMMA . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 46

state 40

    (18) varlist -> varlist COMMA . ID

    ID              shift and go to state 47


state 41

    (39) if_statement -> INTEGER IF ID EQUALS val . THEN INTEGER NEWLINE

    THEN            shift and go to state 48


state 42

    (20) expr -> ID . PLUS val
    (21) expr -> ID . MINUS val
    (22) expr -> ID . TIMES val
    (23) expr -> ID . DIVIDE val
    (24) expr -> ID . POWER val
    (25) expr -> ID . COMMA expr
    (26) expr -> ID .

    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POWER           shift and go to state 53
    COMMA           shift and go to state 54
    TO              reduce using rule 26 (expr -> ID .)
    NEWLINE         reduce using rule 26 (expr -> ID .)
    STEP            reduce using rule 26 (expr -> ID .)


state 43

    (32) for_statement -> INTEGER FOR ID EQUALS expr . TO expr STEP val NEWLINE for_block
    (33) for_statement -> INTEGER FOR ID EQUALS expr . TO expr NEWLINE for_block

    TO              shift and go to state 55


state 44

    (27) expr -> val . COMMA expr
    (28) expr -> val .

    COMMA           shift and go to state 56
    TO              reduce using rule 28 (expr -> val .)
    NEWLINE         reduce using rule 28 (expr -> val .)
    STEP            reduce using rule 28 (expr -> val .)


state 45

    (10) command -> LET ID EQUALS expr .

    NEWLINE         reduce using rule 10 (command -> LET ID EQUALS expr .)


state 46

    (15) numlist -> numlist COMMA val .

    COMMA           reduce using rule 15 (numlist -> numlist COMMA val .)
    NEWLINE         reduce using rule 15 (numlist -> numlist COMMA val .)


state 47

    (18) varlist -> varlist COMMA ID .

    COMMA           reduce using rule 18 (varlist -> varlist COMMA ID .)
    NEWLINE         reduce using rule 18 (varlist -> varlist COMMA ID .)


state 48

    (39) if_statement -> INTEGER IF ID EQUALS val THEN . INTEGER NEWLINE

    INTEGER         shift and go to state 57


state 49

    (20) expr -> ID PLUS . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 58

state 50

    (21) expr -> ID MINUS . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 59

state 51

    (22) expr -> ID TIMES . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 60

state 52

    (23) expr -> ID DIVIDE . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 61

state 53

    (24) expr -> ID POWER . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 62

state 54

    (25) expr -> ID COMMA . expr
    (20) expr -> . ID PLUS val
    (21) expr -> . ID MINUS val
    (22) expr -> . ID TIMES val
    (23) expr -> . ID DIVIDE val
    (24) expr -> . ID POWER val
    (25) expr -> . ID COMMA expr
    (26) expr -> . ID
    (27) expr -> . val COMMA expr
    (28) expr -> . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    ID              shift and go to state 42
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    expr                           shift and go to state 63
    val                            shift and go to state 44

state 55

    (32) for_statement -> INTEGER FOR ID EQUALS expr TO . expr STEP val NEWLINE for_block
    (33) for_statement -> INTEGER FOR ID EQUALS expr TO . expr NEWLINE for_block
    (20) expr -> . ID PLUS val
    (21) expr -> . ID MINUS val
    (22) expr -> . ID TIMES val
    (23) expr -> . ID DIVIDE val
    (24) expr -> . ID POWER val
    (25) expr -> . ID COMMA expr
    (26) expr -> . ID
    (27) expr -> . val COMMA expr
    (28) expr -> . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    ID              shift and go to state 42
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    expr                           shift and go to state 64
    val                            shift and go to state 44

state 56

    (27) expr -> val COMMA . expr
    (20) expr -> . ID PLUS val
    (21) expr -> . ID MINUS val
    (22) expr -> . ID TIMES val
    (23) expr -> . ID DIVIDE val
    (24) expr -> . ID POWER val
    (25) expr -> . ID COMMA expr
    (26) expr -> . ID
    (27) expr -> . val COMMA expr
    (28) expr -> . val
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    ID              shift and go to state 42
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 44
    expr                           shift and go to state 65

state 57

    (39) if_statement -> INTEGER IF ID EQUALS val THEN INTEGER . NEWLINE

    NEWLINE         shift and go to state 66


state 58

    (20) expr -> ID PLUS val .

    TO              reduce using rule 20 (expr -> ID PLUS val .)
    NEWLINE         reduce using rule 20 (expr -> ID PLUS val .)
    STEP            reduce using rule 20 (expr -> ID PLUS val .)


state 59

    (21) expr -> ID MINUS val .

    TO              reduce using rule 21 (expr -> ID MINUS val .)
    NEWLINE         reduce using rule 21 (expr -> ID MINUS val .)
    STEP            reduce using rule 21 (expr -> ID MINUS val .)


state 60

    (22) expr -> ID TIMES val .

    TO              reduce using rule 22 (expr -> ID TIMES val .)
    NEWLINE         reduce using rule 22 (expr -> ID TIMES val .)
    STEP            reduce using rule 22 (expr -> ID TIMES val .)


state 61

    (23) expr -> ID DIVIDE val .

    TO              reduce using rule 23 (expr -> ID DIVIDE val .)
    NEWLINE         reduce using rule 23 (expr -> ID DIVIDE val .)
    STEP            reduce using rule 23 (expr -> ID DIVIDE val .)


state 62

    (24) expr -> ID POWER val .

    TO              reduce using rule 24 (expr -> ID POWER val .)
    NEWLINE         reduce using rule 24 (expr -> ID POWER val .)
    STEP            reduce using rule 24 (expr -> ID POWER val .)


state 63

    (25) expr -> ID COMMA expr .

    TO              reduce using rule 25 (expr -> ID COMMA expr .)
    NEWLINE         reduce using rule 25 (expr -> ID COMMA expr .)
    STEP            reduce using rule 25 (expr -> ID COMMA expr .)


state 64

    (32) for_statement -> INTEGER FOR ID EQUALS expr TO expr . STEP val NEWLINE for_block
    (33) for_statement -> INTEGER FOR ID EQUALS expr TO expr . NEWLINE for_block

    STEP            shift and go to state 67
    NEWLINE         shift and go to state 68


state 65

    (27) expr -> val COMMA expr .

    TO              reduce using rule 27 (expr -> val COMMA expr .)
    NEWLINE         reduce using rule 27 (expr -> val COMMA expr .)
    STEP            reduce using rule 27 (expr -> val COMMA expr .)


state 66

    (39) if_statement -> INTEGER IF ID EQUALS val THEN INTEGER NEWLINE .

    INTEGER         reduce using rule 39 (if_statement -> INTEGER IF ID EQUALS val THEN INTEGER NEWLINE .)
    NEWLINE         reduce using rule 39 (if_statement -> INTEGER IF ID EQUALS val THEN INTEGER NEWLINE .)


state 67

    (32) for_statement -> INTEGER FOR ID EQUALS expr TO expr STEP . val NEWLINE for_block
    (29) val -> . INTEGER
    (30) val -> . FLOAT

    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 33

    val                            shift and go to state 69

state 68

    (33) for_statement -> INTEGER FOR ID EQUALS expr TO expr NEWLINE . for_block
    (34) for_block -> . statement for_block
    (35) for_block -> . if_statement for_block
    (36) for_block -> . for_statement for_block
    (37) for_block -> . next_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (38) next_statement -> . INTEGER NEXT ID NEWLINE

    INTEGER         shift and go to state 70
    NEWLINE         shift and go to state 8

    for_block                      shift and go to state 71
    statement                      shift and go to state 72
    if_statement                   shift and go to state 73
    for_statement                  shift and go to state 74
    next_statement                 shift and go to state 75

state 69

    (32) for_statement -> INTEGER FOR ID EQUALS expr TO expr STEP val . NEWLINE for_block

    NEWLINE         shift and go to state 76


state 70

    (6) statement -> INTEGER . command NEWLINE
    (7) statement -> INTEGER . NEWLINE
    (39) if_statement -> INTEGER . IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> INTEGER . FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> INTEGER . FOR ID EQUALS expr TO expr NEWLINE for_block
    (38) next_statement -> INTEGER . NEXT ID NEWLINE
    (9) command -> . REM
    (10) command -> . LET ID EQUALS expr
    (11) command -> . PRINT STRING
    (12) command -> . COMMA PRINT
    (13) command -> . LET error
    (14) command -> . DATA numlist
    (17) command -> . READ varlist

    NEWLINE         shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    NEXT            shift and go to state 77
    REM             shift and go to state 17
    LET             shift and go to state 18
    PRINT           shift and go to state 19
    COMMA           shift and go to state 20
    DATA            shift and go to state 21
    READ            shift and go to state 22

    command                        shift and go to state 12

state 71

    (33) for_statement -> INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block .

    INTEGER         reduce using rule 33 (for_statement -> INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block .)
    NEWLINE         reduce using rule 33 (for_statement -> INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block .)


state 72

    (34) for_block -> statement . for_block
    (34) for_block -> . statement for_block
    (35) for_block -> . if_statement for_block
    (36) for_block -> . for_statement for_block
    (37) for_block -> . next_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (38) next_statement -> . INTEGER NEXT ID NEWLINE

    INTEGER         shift and go to state 70
    NEWLINE         shift and go to state 8

    statement                      shift and go to state 72
    for_block                      shift and go to state 78
    if_statement                   shift and go to state 73
    for_statement                  shift and go to state 74
    next_statement                 shift and go to state 75

state 73

    (35) for_block -> if_statement . for_block
    (34) for_block -> . statement for_block
    (35) for_block -> . if_statement for_block
    (36) for_block -> . for_statement for_block
    (37) for_block -> . next_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (38) next_statement -> . INTEGER NEXT ID NEWLINE

    INTEGER         shift and go to state 70
    NEWLINE         shift and go to state 8

    if_statement                   shift and go to state 73
    for_block                      shift and go to state 79
    statement                      shift and go to state 72
    for_statement                  shift and go to state 74
    next_statement                 shift and go to state 75

state 74

    (36) for_block -> for_statement . for_block
    (34) for_block -> . statement for_block
    (35) for_block -> . if_statement for_block
    (36) for_block -> . for_statement for_block
    (37) for_block -> . next_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (38) next_statement -> . INTEGER NEXT ID NEWLINE

    INTEGER         shift and go to state 70
    NEWLINE         shift and go to state 8

    for_statement                  shift and go to state 74
    for_block                      shift and go to state 80
    statement                      shift and go to state 72
    if_statement                   shift and go to state 73
    next_statement                 shift and go to state 75

state 75

    (37) for_block -> next_statement .

    INTEGER         reduce using rule 37 (for_block -> next_statement .)
    NEWLINE         reduce using rule 37 (for_block -> next_statement .)


state 76

    (32) for_statement -> INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE . for_block
    (34) for_block -> . statement for_block
    (35) for_block -> . if_statement for_block
    (36) for_block -> . for_statement for_block
    (37) for_block -> . next_statement
    (6) statement -> . INTEGER command NEWLINE
    (7) statement -> . INTEGER NEWLINE
    (8) statement -> . NEWLINE
    (39) if_statement -> . INTEGER IF ID EQUALS val THEN INTEGER NEWLINE
    (32) for_statement -> . INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block
    (33) for_statement -> . INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block
    (38) next_statement -> . INTEGER NEXT ID NEWLINE

    INTEGER         shift and go to state 70
    NEWLINE         shift and go to state 8

    for_block                      shift and go to state 81
    statement                      shift and go to state 72
    if_statement                   shift and go to state 73
    for_statement                  shift and go to state 74
    next_statement                 shift and go to state 75

state 77

    (38) next_statement -> INTEGER NEXT . ID NEWLINE

    ID              shift and go to state 82


state 78

    (34) for_block -> statement for_block .

    INTEGER         reduce using rule 34 (for_block -> statement for_block .)
    NEWLINE         reduce using rule 34 (for_block -> statement for_block .)


state 79

    (35) for_block -> if_statement for_block .

    INTEGER         reduce using rule 35 (for_block -> if_statement for_block .)
    NEWLINE         reduce using rule 35 (for_block -> if_statement for_block .)


state 80

    (36) for_block -> for_statement for_block .

    INTEGER         reduce using rule 36 (for_block -> for_statement for_block .)
    NEWLINE         reduce using rule 36 (for_block -> for_statement for_block .)


state 81

    (32) for_statement -> INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block .

    INTEGER         reduce using rule 32 (for_statement -> INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block .)
    NEWLINE         reduce using rule 32 (for_statement -> INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block .)


state 82

    (38) next_statement -> INTEGER NEXT ID . NEWLINE

    NEWLINE         shift and go to state 83


state 83

    (38) next_statement -> INTEGER NEXT ID NEWLINE .

    INTEGER         reduce using rule 38 (next_statement -> INTEGER NEXT ID NEWLINE .)
    NEWLINE         reduce using rule 38 (next_statement -> INTEGER NEXT ID NEWLINE .)

