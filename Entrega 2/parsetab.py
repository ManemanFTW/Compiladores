
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DATA DEF DIM DIVIDE END EQUALS FLOAT FOR GE GT ID IF INTEGER LE LET LPAREN LT MINUS NE NEWLINE NEXT PLUS POWER PRINT READ REM RETURN RPAREN SEMI STEP STOP STRING THEN TIMES TOmain : list_statementslist_statements : statement list_statements\n                        | if_statement list_statements\n                        | for_statement list_statements\n                        | end_statementstatement : INTEGER command NEWLINE\n                 | INTEGER NEWLINE\n                 | NEWLINEcommand : REM\n               | LET ID EQUALS expr\n               | PRINT STRING\n               | COMMA PRINTcommand : LET errorcommand : DATA numlistnumlist : numlist COMMA val\n               | valcommand : READ varlistvarlist : varlist COMMA ID\n               | IDexpr : ID PLUS val\n            | ID MINUS val\n            | ID TIMES val\n            | ID DIVIDE val\n            | ID POWER val\n            | ID COMMA expr\n            | ID\n            | val COMMA expr\n            | valval : INTEGER\n           | FLOAT end_statement : INTEGER END for_statement : INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block\n                        |  INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block for_block : statement for_block\n                    | if_statement for_block\n                    | for_statement for_block\n                    | next_statementnext_statement : INTEGER NEXT ID NEWLINEif_statement : INTEGER IF ID EQUALS val THEN INTEGER NEWLINE'
    
_lr_action_items = {'INTEGER':([0,3,4,5,8,13,21,23,36,37,38,39,48,49,50,51,52,53,54,55,56,66,67,68,71,72,73,74,75,76,78,79,80,81,83,],[7,7,7,7,-8,-7,32,-6,32,32,32,32,57,32,32,32,32,32,32,32,32,-39,32,70,-33,70,70,70,-37,70,-34,-35,-36,-32,-38,]),'NEWLINE':([0,3,4,5,7,8,12,13,17,23,27,28,29,30,31,32,33,34,35,42,44,45,46,47,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,],[8,8,8,8,13,-8,23,-7,-9,-6,-13,-11,-12,-14,-16,-29,-30,-17,-19,-26,-28,-10,-15,-18,66,-20,-21,-22,-23,-24,-25,68,-27,-39,8,76,13,-33,8,8,8,-37,8,-34,-35,-36,-32,83,-38,]),'$end':([1,2,6,9,10,11,16,],[0,-1,-5,-2,-3,-4,-31,]),'IF':([7,70,],[14,14,]),'FOR':([7,70,],[15,15,]),'END':([7,],[16,]),'REM':([7,70,],[17,17,]),'LET':([7,70,],[18,18,]),'PRINT':([7,20,70,],[19,29,19,]),'COMMA':([7,30,31,32,33,34,35,42,44,46,47,70,],[20,39,-16,-29,-30,40,-19,54,56,-15,-18,20,]),'DATA':([7,70,],[21,21,]),'READ':([7,70,],[22,22,]),'ID':([14,15,18,22,37,38,40,54,55,56,77,],[24,25,26,35,42,42,47,42,42,42,82,]),'error':([18,],[27,]),'STRING':([19,],[28,]),'FLOAT':([21,36,37,38,39,49,50,51,52,53,54,55,56,67,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'EQUALS':([24,25,26,],[36,37,38,]),'THEN':([32,33,41,],[-29,-30,48,]),'TO':([32,33,42,43,44,58,59,60,61,62,63,65,],[-29,-30,-26,55,-28,-20,-21,-22,-23,-24,-25,-27,]),'STEP':([32,33,42,44,58,59,60,61,62,63,64,65,],[-29,-30,-26,-28,-20,-21,-22,-23,-24,-25,67,-27,]),'PLUS':([42,],[49,]),'MINUS':([42,],[50,]),'TIMES':([42,],[51,]),'DIVIDE':([42,],[52,]),'POWER':([42,],[53,]),'NEXT':([70,],[77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'list_statements':([0,3,4,5,],[2,9,10,11,]),'statement':([0,3,4,5,68,72,73,74,76,],[3,3,3,3,72,72,72,72,72,]),'if_statement':([0,3,4,5,68,72,73,74,76,],[4,4,4,4,73,73,73,73,73,]),'for_statement':([0,3,4,5,68,72,73,74,76,],[5,5,5,5,74,74,74,74,74,]),'end_statement':([0,3,4,5,],[6,6,6,6,]),'command':([7,70,],[12,12,]),'numlist':([21,],[30,]),'val':([21,36,37,38,39,49,50,51,52,53,54,55,56,67,],[31,41,44,44,46,58,59,60,61,62,44,44,44,69,]),'varlist':([22,],[34,]),'expr':([37,38,54,55,56,],[43,45,63,64,65,]),'for_block':([68,72,73,74,76,],[71,78,79,80,81,]),'next_statement':([68,72,73,74,76,],[75,75,75,75,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> list_statements','main',1,'p_main','compilador.py',156),
  ('list_statements -> statement list_statements','list_statements',2,'p_list_statement','compilador.py',160),
  ('list_statements -> if_statement list_statements','list_statements',2,'p_list_statement','compilador.py',161),
  ('list_statements -> for_statement list_statements','list_statements',2,'p_list_statement','compilador.py',162),
  ('list_statements -> end_statement','list_statements',1,'p_list_statement','compilador.py',163),
  ('statement -> INTEGER command NEWLINE','statement',3,'p_statement','compilador.py',170),
  ('statement -> INTEGER NEWLINE','statement',2,'p_statement','compilador.py',171),
  ('statement -> NEWLINE','statement',1,'p_statement','compilador.py',172),
  ('command -> REM','command',1,'p_command','compilador.py',183),
  ('command -> LET ID EQUALS expr','command',4,'p_command','compilador.py',184),
  ('command -> PRINT STRING','command',2,'p_command','compilador.py',185),
  ('command -> COMMA PRINT','command',2,'p_command','compilador.py',186),
  ('command -> LET error','command',2,'p_command_Erem','compilador.py',204),
  ('command -> DATA numlist','command',2,'p_command_data','compilador.py',211),
  ('numlist -> numlist COMMA val','numlist',3,'p_numlist','compilador.py',215),
  ('numlist -> val','numlist',1,'p_numlist','compilador.py',216),
  ('command -> READ varlist','command',2,'p_command_read','compilador.py',223),
  ('varlist -> varlist COMMA ID','varlist',3,'p_varlist','compilador.py',227),
  ('varlist -> ID','varlist',1,'p_varlist','compilador.py',228),
  ('expr -> ID PLUS val','expr',3,'p_expr','compilador.py',235),
  ('expr -> ID MINUS val','expr',3,'p_expr','compilador.py',236),
  ('expr -> ID TIMES val','expr',3,'p_expr','compilador.py',237),
  ('expr -> ID DIVIDE val','expr',3,'p_expr','compilador.py',238),
  ('expr -> ID POWER val','expr',3,'p_expr','compilador.py',239),
  ('expr -> ID COMMA expr','expr',3,'p_expr','compilador.py',240),
  ('expr -> ID','expr',1,'p_expr','compilador.py',241),
  ('expr -> val COMMA expr','expr',3,'p_expr','compilador.py',242),
  ('expr -> val','expr',1,'p_expr','compilador.py',243),
  ('val -> INTEGER','val',1,'p_val','compilador.py',255),
  ('val -> FLOAT','val',1,'p_val','compilador.py',256),
  ('end_statement -> INTEGER END','end_statement',2,'p_end_statement','compilador.py',261),
  ('for_statement -> INTEGER FOR ID EQUALS expr TO expr STEP val NEWLINE for_block','for_statement',11,'p_for_statement','compilador.py',265),
  ('for_statement -> INTEGER FOR ID EQUALS expr TO expr NEWLINE for_block','for_statement',9,'p_for_statement','compilador.py',266),
  ('for_block -> statement for_block','for_block',2,'p_for_block','compilador.py',275),
  ('for_block -> if_statement for_block','for_block',2,'p_for_block','compilador.py',276),
  ('for_block -> for_statement for_block','for_block',2,'p_for_block','compilador.py',277),
  ('for_block -> next_statement','for_block',1,'p_for_block','compilador.py',278),
  ('next_statement -> INTEGER NEXT ID NEWLINE','next_statement',4,'p_next_statement','compilador.py',286),
  ('if_statement -> INTEGER IF ID EQUALS val THEN INTEGER NEWLINE','if_statement',8,'p_if_statement','compilador.py',291),
]
